package com.epam.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.epam.greendao.Model;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MODEL".
*/
public class ModelDao extends AbstractDao<Model, String> {

    public static final String TABLENAME = "MODEL";

    /**
     * Properties of entity Model.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Index = new Property(1, Integer.class, "index", false, "INDEX");
        public final static Property IsActive = new Property(2, Boolean.class, "isActive", false, "IS_ACTIVE");
        public final static Property Picture = new Property(3, String.class, "picture", false, "PICTURE");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Company = new Property(5, String.class, "company", false, "COMPANY");
        public final static Property Email = new Property(6, String.class, "email", false, "EMAIL");
        public final static Property About = new Property(7, String.class, "about", false, "ABOUT");
        public final static Property Registered = new Property(8, String.class, "registered", false, "REGISTERED");
        public final static Property Latitude = new Property(9, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(10, Double.class, "longitude", false, "LONGITUDE");
    };


    public ModelDao(DaoConfig config) {
        super(config);
    }
    
    public ModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MODEL\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"INDEX\" INTEGER," + // 1: index
                "\"IS_ACTIVE\" INTEGER," + // 2: isActive
                "\"PICTURE\" TEXT," + // 3: picture
                "\"NAME\" TEXT," + // 4: name
                "\"COMPANY\" TEXT," + // 5: company
                "\"EMAIL\" TEXT," + // 6: email
                "\"ABOUT\" TEXT," + // 7: about
                "\"REGISTERED\" TEXT," + // 8: registered
                "\"LATITUDE\" REAL," + // 9: latitude
                "\"LONGITUDE\" REAL);"); // 10: longitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MODEL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Model entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Integer index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(2, index);
        }
 
        Boolean isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindLong(3, isActive ? 1L: 0L);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(4, picture);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(6, company);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String about = entity.getAbout();
        if (about != null) {
            stmt.bindString(8, about);
        }
 
        String registered = entity.getRegistered();
        if (registered != null) {
            stmt.bindString(9, registered);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(10, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(11, longitude);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Model readEntity(Cursor cursor, int offset) {
        Model entity = new Model( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // index
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // isActive
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // picture
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // company
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // about
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // registered
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // latitude
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10) // longitude
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Model entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIndex(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIsActive(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setPicture(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCompany(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAbout(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRegistered(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLatitude(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setLongitude(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Model entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Model entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
